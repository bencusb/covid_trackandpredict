/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

///Ez új! 
import graph.Graph;
import java.awt.Graphics;
import API.apiCalling;
import Config.Config;
import java.awt.Image;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Date;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;



/**
 *  Generates the MainGUI, and calls the api to Hungary with the current date
 * 
 * @author Yama
 */
public class mainGUI extends javax.swing.JFrame {

    /**
     *
     */
    public static apiCalling test;

    /**
     *
     */
    public static apiCalling stats;
    Config config = new Config("config.alomazelet");
    private List<String> countries = new ArrayList<String>();
    private List<Integer> dailyStatsInfected = new ArrayList<>();
    private List<Integer> dailyStatsDeaths = new ArrayList<>();
    private String selectedCountry;
    private String date1;
    private String date2;
    private Graph covidGraph;
    Graphics g;
    /**
     * Creates new form mainGUI
     */
    public mainGUI() {       
        initComponents();
        AutoCompleteDecorator.decorate(countrySelector);    
        
        try {
            jButton1.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/search.png"))));
            jButton2.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/search.png"))));
        }catch (Exception e){
            jTextArea1.setText("Egy vagy több kép betöltése nem sikerült.\nEllenőrizze, hogy van-e internetkapcsolat.");
        }
        
        Boolean b = false;
        try {
            countrySelector.setSelectedItem(config.GetProp(countrySelector.getName().toString()));
            b = Boolean.parseBoolean(config.GetProp(jToggleButton1.getName().toString()));
            runningAvgCheck.setSelected(Boolean.parseBoolean(config.GetProp(runningAvgCheck.getName().toString())));
            linearCheck.setSelected(Boolean.parseBoolean(config.GetProp(linearCheck.getName().toString())));
            exponencialCheck.setSelected(Boolean.parseBoolean(config.GetProp(exponencialCheck.getName().toString())));
        } catch (Exception e) {
        }
        
        if(b){
            setDark();
            jToggleButton1.setSelected(true);
        }
        else {
            setLight();
            jToggleButton1.setSelected(false);
        }
        
        jPanel4.setVisible(false);
        covidGraph = new Graph();
        try{
            test = new apiCalling("fetchCountryList");
        }catch (IOException | InterruptedException | ParseException ex) {
            Logger.getLogger(mainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        countries = test.getCountries();
        //countrySelector.setModel(new DefaultComboBoxModel<String>(test.getCountries().toArray(new String[0])));
        for(int i=0; i < countries.size(); i++){
            countrySelector.addItem(countries.get(i));
        }
        fromDate.setDate(java.sql.Date.valueOf(java.time.LocalDate.now()));
        tillDate.setDate(java.sql.Date.valueOf(java.time.LocalDate.now()));
        //System.out.println(java.sql.Date.valueOf(java.time.LocalDate.now()));
        countrySearch();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        countrySelector = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        numberOfDeceased = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numberOfInfected = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        fromDate = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        regionSelect = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        tillDate = new com.toedter.calendar.JDateChooser();
        exponencialCheck = new javax.swing.JCheckBox();
        linearCheck = new javax.swing.JCheckBox();
        runningAvgCheck = new javax.swing.JCheckBox();
        runningAverageDays = new javax.swing.JSpinner();
        grafikonValto = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(192, 226, 238));
        setBounds(new java.awt.Rectangle(0, 0, 1024, 800));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(192, 226, 238));
        jPanel1.setPreferredSize(new java.awt.Dimension(914, 87));

        jLabel2.setFont(new java.awt.Font("Microsoft JhengHei", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(193, 240, 219));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2))
        );

        jPanel2.setBackground(new java.awt.Color(192, 226, 238));

        countrySelector.setBackground(new java.awt.Color(51, 51, 51));
        countrySelector.setEditable(true);
        countrySelector.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        countrySelector.setForeground(new java.awt.Color(102, 102, 102));
        countrySelector.setName("countrySelector"); // NOI18N
        countrySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countrySelectorActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Fertőzöttek száma(összes): ");

        numberOfDeceased.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        numberOfDeceased.setForeground(new java.awt.Color(255, 0, 0));
        numberOfDeceased.setText("123123123");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Halottak száma(összes):");

        numberOfInfected.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        numberOfInfected.setText("123123123");

        jToggleButton1.setFocusPainted(false);
        jToggleButton1.setName("DarkMode"); // NOI18N
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Ország kiválasztása:");

        jPanel3.setBackground(new java.awt.Color(192, 226, 238));

        fromDate.setDateFormatString("y-MM-d");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(192, 226, 238));

        regionSelect.setBackground(new java.awt.Color(51, 51, 51));
        regionSelect.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regionSelect.setName("regionSelect"); // NOI18N

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regionSelect, 0, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(regionSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tillDate.setDateFormatString("y-MM-d");

        exponencialCheck.setText("Exponenciális");
        exponencialCheck.setContentAreaFilled(false);
        exponencialCheck.setName("exponential"); // NOI18N
        exponencialCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponencialCheckActionPerformed(evt);
            }
        });

        linearCheck.setText("Lineáris");
        linearCheck.setContentAreaFilled(false);
        linearCheck.setName("linear"); // NOI18N
        linearCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearCheckActionPerformed(evt);
            }
        });

        runningAvgCheck.setText("Futó átlag");
        runningAvgCheck.setContentAreaFilled(false);
        runningAvgCheck.setName("runningavg"); // NOI18N
        runningAvgCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runningAvgCheckActionPerformed(evt);
            }
        });

        runningAverageDays.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        runningAverageDays.setName("runningavgval"); // NOI18N
        runningAverageDays.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valueChanged(evt);
            }
        });

        grafikonValto.setBackground(new java.awt.Color(51, 51, 51));
        grafikonValto.setFont(new java.awt.Font("Dialog", 0, 30)); // NOI18N
        grafikonValto.setText("Fertőzöttek");
        grafikonValto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        grafikonValto.setContentAreaFilled(false);
        grafikonValto.setFocusPainted(false);
        grafikonValto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grafikonValtoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(tillDate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(countrySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberOfDeceased)
                            .addComponent(numberOfInfected))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(41, 41, 41))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runningAverageDays, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runningAvgCheck)
                    .addComponent(linearCheck)
                    .addComponent(exponencialCheck))
                .addGap(13, 13, 13)
                .addComponent(grafikonValto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(countrySelector, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tillDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(linearCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exponencialCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runningAvgCheck)
                        .addGap(5, 5, 5)
                        .addComponent(runningAverageDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(grafikonValto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberOfInfected)
                .addGap(40, 40, 40)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberOfDeceased)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBackground(new java.awt.Color(192, 226, 238));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel6ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1058, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Itt jelennek majd meg adatok");
        jTextArea1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1404, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Turns Night mode on or off
     * 
     * @author Patrik
     * @param evt An event
     */
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        setMode();
        SwingUtilities.invokeLater(() -> {
            if(grafikonValto.isSelected()){
                createDeceasedGraph();
            }else{
                createInfectedGraph();
            }   
        });
    }//GEN-LAST:event_jToggleButton1ActionPerformed

/**
     * Hides and reveals the region panel and fills it up if the country has regions accordingly
     * 
     * @author Patrik
     * @param evt combobox selected item changed
     */
    private void countrySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countrySelectorActionPerformed
        
    }//GEN-LAST:event_countrySelectorActionPerformed

    /**
     * Calls the API with the given parameters
     * 
     * @param evt An button click
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            config.Save(countrySelector.getName(), countrySelector.getSelectedItem().toString());
            countrySearch();
            saveToCache();
            writeOutData();
            regionSearch();
            dailyStatsInf=null;
            if(grafikonValto.isSelected()){
                createDeceasedGraph();
            }else{
                createInfectedGraph();
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Saves the data to a cache file.
     */
    void saveToCache(){
        LocalDate curdate = LocalDate.parse(date1);
        for (int i = 0; i < dailyStatsInfected.size(); i++){
            config.Save(selectedCountry + "_" + curdate.toString() + "_c", dailyStatsInfected.get(i).toString());
            config.Save(selectedCountry + "_" + curdate.toString() + "_d", dailyStatsDeaths.get(i).toString());
            curdate = curdate.plusDays(1);
        }
    }
    
    /**
    * Writes out data 
    */
    private void writeOutData(){
        jTextArea1.setText("Napi lebontásban:\r\n");             
        LocalDate curdate = LocalDate.parse(date1);
        for (int i = 0; i < dailyStatsInfected.size(); i++){
            String curday = curdate.toString();
            jTextArea1.setText(jTextArea1.getText() + "\t"+ curday + ": Fertőzöttek: " + dailyStatsInfected.get(i) + ", Halottak: " + dailyStatsDeaths.get(i) + "\r\n");
            curdate = curdate.plusDays(1);
        }
    }
    
    /**
     * Calls the API with the given parameters
     * 
     * @param evt An button click
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void runningAvgCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runningAvgCheckActionPerformed
        if(grafikonValto.isSelected()){
            createDeceasedGraph();
        }else{
            createInfectedGraph();
        } 
        config.Save(runningAvgCheck.getName(), runningAvgCheck.isSelected()+"");
        if(!runningAvgCheck.isSelected()) runningAverageDays.setVisible(false);
        else runningAverageDays.setVisible(true);
    }//GEN-LAST:event_runningAvgCheckActionPerformed

    private void exponencialCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponencialCheckActionPerformed
            if(grafikonValto.isSelected()){
                createDeceasedGraph();
            }else{
                createInfectedGraph();
            }
            config.Save(exponencialCheck.getName(), exponencialCheck.isSelected()+"");     
    }//GEN-LAST:event_exponencialCheckActionPerformed

    private void linearCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearCheckActionPerformed
            if(grafikonValto.isSelected()){
                createDeceasedGraph();
            }else{
                createInfectedGraph();
            }
        config.Save(linearCheck.getName(), linearCheck.isSelected()+"");
    }//GEN-LAST:event_linearCheckActionPerformed

    private void valueChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueChanged
        if(grafikonValto.isSelected()){
            createDeceasedGraph();
        }else{
            createInfectedGraph();
        }
    }//GEN-LAST:event_valueChanged

    private void jPanel6ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel6ComponentResized
        SwingUtilities.invokeLater(() -> {
            if(grafikonValto.isSelected()){
                createDeceasedGraph();
            }else{
                createInfectedGraph();
            }  
        });
    }//GEN-LAST:event_jPanel6ComponentResized

    private void grafikonValtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grafikonValtoActionPerformed
        // TODO add your handling code here:
        if(grafikonValto.isSelected()){
            grafikonValto.setText("Halottak");
            createDeceasedGraph();
        }
        else{
            grafikonValto.setText("Fertőzöttek");
            createInfectedGraph();
        }
    }//GEN-LAST:event_grafikonValtoActionPerformed
    
    /**
     * Firstly it calls the API with the given parameters, then sums and displays the infected and deceased people
     * 
     * @author Yama
     * @author T. Dani
     */
    public int dailyStatsInf[];
    private void createInfectedGraph(){
        
        LocalDate dateBefore = LocalDate.parse(date1);
	LocalDate dateAfter = LocalDate.parse(date2);
        long noOfDaysBetween = ChronoUnit.DAYS.between(dateBefore, dateAfter);
        int noOfDays = (int)noOfDaysBetween+1;
        
        System.out.println("the number of days is "+noOfDays);
        
        dailyStatsInf = new int[dailyStatsInfected.size()];
        
        for (int i = 0; i < dailyStatsInfected.size(); i++) {
            dailyStatsInf[i] = dailyStatsInfected.get(i);
        }
        Graph graph = new Graph();
        Date date;
        Date startDate = fromDate.getDate();
        Date endDate= tillDate.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        if (startDate.after(endDate)){
            date = endDate;
        } 
        else{
            date = startDate;
        }
        try{
            graph.leastSquares(dailyStatsInf, noOfDays);//4.
            graph.drawing(jPanel6.getGraphics(), jPanel6.getWidth(), jPanel6.getHeight(), noOfDays, dailyStatsInf,
                graph.leastSquares(dailyStatsInf, noOfDays)[0], graph.leastSquares(dailyStatsInf,
                        noOfDays)[1],date, jToggleButton1.isSelected(), nev, 50, 
                        linearCheck.isSelected(), exponencialCheck.isSelected(), runningAvgCheck.isSelected(), (int)runningAverageDays.getValue());
        }
        catch (java.lang.ArrayIndexOutOfBoundsException e){
            jTextArea1.setText("A mai adatokat nem lehet még lekérni. Próbáld újra később!");
        } 
        catch (Exception e){
            jTextArea1.setText("Hiba történt! Próbáld meg másokkal!");
        } 
    }
    
    public int dailyStatsDe[];
    private void createDeceasedGraph(){
        
        LocalDate dateBefore = LocalDate.parse(date1);
	LocalDate dateAfter = LocalDate.parse(date2);
        long noOfDaysBetween = ChronoUnit.DAYS.between(dateBefore, dateAfter);
        int noOfDays = (int)noOfDaysBetween+1;
        
        System.out.println("the number of days is "+noOfDays);
        
        dailyStatsDe = new int[dailyStatsDeaths.size()];
        
        for (int i = 0; i < dailyStatsDeaths.size(); i++) {
            dailyStatsDe[i] = dailyStatsDeaths.get(i);
        }
        Graph graph = new Graph();
        try{
            graph.leastSquares(dailyStatsDe, noOfDays);//4.
            graph.drawing(jPanel6.getGraphics(), jPanel6.getWidth(), jPanel6.getHeight(), noOfDays, dailyStatsDe,
                graph.leastSquares(dailyStatsDe, noOfDays)[0], graph.leastSquares(dailyStatsDe,
                        noOfDays)[1],fromDate.getDate(), jToggleButton1.isSelected(), nev, 50, 
                        linearCheck.isSelected(), exponencialCheck.isSelected(), runningAvgCheck.isSelected(), (int)runningAverageDays.getValue());
        }
        catch (java.lang.ArrayIndexOutOfBoundsException e){
            jTextArea1.setText("A mai adatokat nem lehet még lekérni. Próbáld újra később!");
        } 
        catch (Exception e){
            jTextArea1.setText("Hiba történt! Próbáld meg másokkal!");
        } 
    }
    private void regionSearch(){
        selectedCountry = countrySelector.getSelectedItem().toString();
        regionSelect.removeAllItems();
        try{
            test.fetchRegionList(selectedCountry);
        }catch(Exception e){
            
        }
        //itt elszáll a program az ifnél (ha valaki tudja akkor nyugodtan kijavíthatja)
        List<String> regions = new ArrayList<String>();
        try {
            regions = test.getRegions(selectedCountry);
        } catch (Exception e) {
            System.out.println("Region exception");
        }
        finally{
            if (!(regions.isEmpty())){
                jPanel4.setVisible(true);           
                for(int i=0; i < regions.size(); i++){
                    regionSelect.addItem(regions.get(i));
                }
            }
            else jPanel4.setVisible(false);
        }
    }
    List<String> nev=new ArrayList<>();
    private void countrySearch(){
        if(fromDate.getDate() != null && tillDate.getDate() != null){
            Date date_date = fromDate.getDate();
            Date date_date2 = tillDate.getDate();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            if (date_date.after(date_date2)){
                date1 = dateFormat.format(date_date2);
                date2 = dateFormat.format(date_date);
            } 
            else{
                date1 = dateFormat.format(date_date);
                date2 = dateFormat.format(date_date2);
            }
            //System.out.println(date1);
        }
        
        selectedCountry = countrySelector.getSelectedItem().toString();
        try{
            stats = new apiCalling(date1, date2, selectedCountry);
        }catch (IOException | InterruptedException | ParseException | URISyntaxException ex) {
            Logger.getLogger(mainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        int infected = 0;
        int deceased = 0;
        dailyStatsInfected.clear();
        for(int i: stats.getTodayNewConfirmed().values()){
            dailyStatsInfected.add(i);
            infected += i;
        };
        nev.clear();
        nev=new ArrayList<>(stats.getTodayNewConfirmed().keySet());
        dailyStatsDeaths.clear();
        for(int i: stats.getTodayNewDeaths().values()){
            dailyStatsDeaths.add(i);
            deceased += i;
        }
        String infected_string = String.valueOf(infected);
        numberOfInfected.setText(infected_string);
        String deceased_string = String.valueOf(deceased);
        numberOfDeceased.setText(deceased_string);
    }
    
    /**
     * Decides wether to turn on Night or Light mode
     * 
     * @author Patrik
     */
     private void setMode(){
        Boolean selected = jToggleButton1.isSelected();
        config.Save(jToggleButton1.getName(), selected.toString());
        if (selected){
            setDark();
        }
        else {
            setLight();
        }
    }
    /**
     * Enables dark mode, by setting the background colors of elements
     * 
     * Also switches the image to the correct one
     * 
     * @author Patrik
     */
    private void setDark(){
        int r = 19;
        int g = 3;
        int b = 64;
        Color darkmodeColor = new Color(r, g, b);
     
        try {
            jToggleButton1.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/LightMode.png"))));
            jLabel2.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/LogoW.png"))));
        } catch (Exception e) {
            jTextArea1.setText("Egy vagy több kép betöltése nem sikerült.\nEllenőrizze, hogy van-e internetkapcsolat.");
        }
        
        
        grafikonValto.setForeground(Color.WHITE);
        
        jPanel6.setBackground(Color.black);
        jPanel2.setBackground(darkmodeColor);
        jPanel1.setBackground(darkmodeColor);
        jPanel5.setBackground(darkmodeColor);
        jPanel3.setBackground(darkmodeColor);
        jPanel4.setBackground(darkmodeColor);
            
        jLabel3.setForeground(Color.white);
        jLabel1.setForeground(Color.white);
        jLabel5.setForeground(Color.white);
        numberOfInfected.setForeground(Color.white);
        exponencialCheck.setForeground(Color.white);
        linearCheck.setForeground(Color.white);
        runningAvgCheck.setForeground(Color.white);
            
        jTextArea1.setBackground(Color.black);
        jTextArea1.setForeground(Color.white);
    }
    
    /**
     * Enables dark mode, by setting the background colors of elements
     * 
     * Also switches the image to the correct one
     * 
     * @author Patrik
     */
    private void setLight(){
        int r = 192;
        int g = 226;
        int b = 238;
        Color color = new Color(r,g,b);       
        try {
            jToggleButton1.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/DarkMode.png"))));
            jLabel2.setIcon(new ImageIcon(ImageIO.read(new URL("http://karakaip.web.elte.hu/EVP%20kepek/LogoB.png"))));
        } catch (Exception e) {
            jTextArea1.setText("Egy vagy töb bkép betöltése nem sikerült.\nEllenőrizze, hogy van-e internetkapcsolat.");
        }
            
        grafikonValto.setForeground(Color.BLACK);
        
        jPanel6.setBackground(Color.white);
        jPanel2.setBackground(color);
        jPanel1.setBackground(color);
        jPanel5.setBackground(color);
        jPanel3.setBackground(color);
        jPanel4.setBackground(color);    
        
        jLabel3.setForeground(Color.black);
        jLabel1.setForeground(color.black);
        jLabel5.setForeground(Color.black);
        numberOfInfected.setForeground(Color.black);
        
        exponencialCheck.setForeground(Color.black);
        linearCheck.setForeground(Color.black);
        runningAvgCheck.setForeground(Color.black);
            
        jTextArea1.setBackground(Color.white);
        jTextArea1.setForeground(Color.black);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new mainGUI().setVisible(true);
        });
    }   

    /**
     * Elements of the UI:
     * <pre>
     * jFrame:
     *      jPanel1: The upmost panel in the application
     *          jLabel2: Currently the name of our group
     *      jPanel2: The panel that's located on the left side of the screen, it contains the number of cases, death count, and the country list
     *          jCombobox1: Stores the available countries
     *          jLabel3: "Number of confirmed cases(all)"
     *          numberOfInfected: the current number of infected people in the selected country
     *          jLabel5: "Death count(all)"
     *          numberOfDeceased: the current number of deceased people in the selected country
     *          jToggleButton1: Toggles the night and light mode of the application
     *          jLabel1: "Select a country:"
     *      jPanel5: The right panel, that consists of displaying the graph, and the other calculated values
     *          jPanel6: This will store the drawn graph
     *              jLabel4: Currently a picture of a graph
     *          jScrollPane1: Holds the TextArea
     *              jTextArea: This will display the other calculated values
     * </pre>
     * 
     * @author T.Dani
     * @author Yama
    */
    private Boolean layout;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> countrySelector;
    private javax.swing.JCheckBox exponencialCheck;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JToggleButton grafikonValto;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JCheckBox linearCheck;
    private javax.swing.JLabel numberOfDeceased;
    private javax.swing.JLabel numberOfInfected;
    private javax.swing.JComboBox<String> regionSelect;
    private javax.swing.JSpinner runningAverageDays;
    private javax.swing.JCheckBox runningAvgCheck;
    private com.toedter.calendar.JDateChooser tillDate;
    // End of variables declaration//GEN-END:variables
}